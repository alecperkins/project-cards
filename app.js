// Generated by CoffeeScript 1.6.2
(function() {
  var $app, Button, Card, CardCanvas, CardCollection, CardView, Collection, Model, Spinner, StringInput, Tags, canvas, card_collection, controls, global_dragging_obj, global_is_dragging, makeStringFieldForProperty, oldSync, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  console.log('app.coffee');

  Tags = Doodad.Tags, Button = Doodad.Button, StringInput = Doodad.StringInput, Spinner = Doodad.Spinner;

  Collection = Backbone.Collection, Model = Backbone.Model;

  oldSync = Backbone.sync;

  Backbone.sync = function(method, model, options) {
    var _ref;

    if (options == null) {
      options = {};
    }
    console.log(method, model, options);
    if ((_ref = options.headers) == null) {
      options.headers = {};
    }
    options.headers = _.extend({}, {
      'Authorization': "Token " + params.CONTENT_API_TOKEN,
      'X-Content-Query-Limit': 100
    }, options.headers);
    return oldSync(method, model, options);
  };

  Card = (function(_super) {
    __extends(Card, _super);

    function Card() {
      _ref = Card.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Card.prototype.url = function() {
      if (this.get('url')) {
        return this.get('url');
      } else {
        return this.collection.url();
      }
    };

    return Card;

  })(Model);

  CardCollection = (function(_super) {
    __extends(CardCollection, _super);

    function CardCollection() {
      this.addCard = __bind(this.addCard, this);      _ref1 = CardCollection.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    CardCollection.prototype.model = Card;

    CardCollection.prototype.url = function() {
      return params.CONTENT_API_ROOT;
    };

    CardCollection.prototype.addCard = function(callback) {
      var x, y, _ref2;

      _ref2 = canvas.getScreenCenter(), x = _ref2.x, y = _ref2.y;
      return this.create({
        type: 'text',
        position: {
          left: x,
          top: y
        }
      }, {
        wait: true,
        success: function(model) {
          return callback(model);
        }
      });
    };

    return CardCollection;

  })(Collection);

  makeStringFieldForProperty = function(_arg) {
    var field, model, options, property;

    model = _arg.model, property = _arg.property, options = _arg.options;
    if (options == null) {
      options = {};
    }
    options.value = model.get(property) || '';
    options.on = {
      blur: function(self) {
        if (self.value !== model.get(property)) {
          return model.save(property, self.value);
        }
      }
    };
    field = new StringInput(options);
    return field;
  };

  global_is_dragging = false;

  global_dragging_obj = null;

  CardView = (function(_super) {
    __extends(CardView, _super);

    function CardView() {
      _ref2 = CardView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    CardView.prototype.className = 'CardView';

    CardView.prototype.events = function() {
      return {
        'mousedown': '_startDrag',
        'mousedown > *': '_stopPropagation',
        'click > *': '_stopPropagation'
      };
    };

    CardView.prototype._stopPropagation = function(e) {
      return e.stopPropagation();
    };

    CardView.prototype._startDrag = function(e) {
      return global_dragging_obj = this;
    };

    CardView.prototype.setPosition = function(x, y) {
      this.x = x;
      this.y = y;
      this.$el.css({
        position: 'absolute',
        left: this.x,
        top: this.y
      });
    };

    CardView.prototype.updatePosition = function(d_x, d_y, save) {
      var new_x, new_y;

      if (save == null) {
        save = false;
      }
      new_x = this.x + d_x;
      new_y = this.y + d_y;
      this.$el.css({
        position: 'absolute',
        left: new_x,
        top: new_y
      });
      if (save) {
        this.x = new_x;
        this.y = new_y;
        this.model.save('position', {
          left: this.x,
          top: this.y
        });
      }
    };

    CardView.prototype.render = function() {
      var _this = this;

      CardView.__super__.render.apply(this, arguments);
      this.$el.empty();
      this.$el.attr('id', this.model.get('id'));
      this.addContent(this.model.get('id'));
      this.addContent(new Button({
        type: 'icon',
        label: 'Toggle',
        "class": 'action',
        extra_classes: ['CardView_toggle'],
        action: function() {
          console.log(_this.$el.attr('data-expanded'));
          if (_this.$el.attr('data-expanded')) {
            return _this.$el.removeAttr('data-expanded');
          } else {
            return _this.$el.attr('data-expanded', true);
          }
        }
      }));
      this.addContent(makeStringFieldForProperty({
        model: this.model,
        property: 'title',
        options: {
          placeholder: 'Title'
        }
      }));
      this.addContent(makeStringFieldForProperty({
        model: this.model,
        property: 'content',
        options: {
          multiline: true,
          label: 'Description',
          extra_classes: ['description']
        }
      }));
      this.addContent(makeStringFieldForProperty({
        model: this.model,
        property: 'questions',
        options: {
          multiline: true,
          label: 'Questions',
          extra_classes: ['description']
        }
      }));
      this.addContent(makeStringFieldForProperty({
        model: this.model,
        property: 'requires',
        options: {
          tokenize: true,
          label: 'Requires'
        }
      }));
      this.addContent(new Button({
        type: 'icon',
        label: 'Delete',
        "class": 'dangerous',
        extra_classes: ['CardView_delete'],
        action: function() {
          _this.model.destroy();
          return _this.$el.remove();
        }
      }));
      this.x = this.model.get('position').left;
      this.y = this.model.get('position').top;
      this.$el.css({
        position: 'absolute',
        left: this.x,
        top: this.y
      });
      return this.el;
    };

    return CardView;

  })(Tags.DIV);

  card_collection = new CardCollection();

  console.log(card_collection.url());

  CardCanvas = (function(_super) {
    __extends(CardCanvas, _super);

    function CardCanvas() {
      this._stopDrag = __bind(this._stopDrag, this);
      this._doDrag = __bind(this._doDrag, this);
      this._startDrag = __bind(this._startDrag, this);
      this.render = __bind(this.render, this);      _ref3 = CardCanvas.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    CardCanvas.prototype.className = 'CardCanvas';

    CardCanvas.prototype.events = function() {
      return {
        'mousedown': '_startDrag',
        'mousemove': '_doDrag',
        'mouseup': '_stopDrag'
      };
    };

    CardCanvas.prototype._zoom = function(e) {
      return console.log(e);
    };

    CardCanvas.prototype.render = function() {
      CardCanvas.__super__.render.call(this);
      this.x = 0;
      this.y = 0;
      this.$el.css({
        left: 0,
        top: 0
      });
      return this.el;
    };

    CardCanvas.prototype._startDrag = function(e) {
      global_is_dragging = true;
      if (global_dragging_obj == null) {
        global_dragging_obj = this;
      }
      global_dragging_obj.$el.attr('data-dragging', true);
      this._drag_x = e.screenX;
      return this._drag_y = e.screenY;
    };

    CardCanvas.prototype._doDrag = function(e) {
      e.preventDefault();
      e.stopPropagation();
      if (global_is_dragging && global_dragging_obj) {
        return global_dragging_obj.updatePosition(e.screenX - this._drag_x, e.screenY - this._drag_y);
      }
    };

    CardCanvas.prototype._stopDrag = function(e) {
      e.stopPropagation();
      global_is_dragging = false;
      if (global_dragging_obj != null) {
        global_dragging_obj.$el.removeAttr('data-dragging');
        global_dragging_obj.updatePosition(e.screenX - this._drag_x, e.screenY - this._drag_y, true);
        this._drag_x = null;
        this._drag_y = null;
        return global_dragging_obj = null;
      }
    };

    CardCanvas.prototype.updatePosition = function(d_x, d_y, save) {
      var new_x, new_y;

      if (save == null) {
        save = false;
      }
      new_x = this.x + d_x;
      new_y = this.y + d_y;
      this.$el.css({
        position: 'absolute',
        left: new_x,
        top: new_y
      });
      if (save) {
        this.x = new_x;
        this.y = new_y;
      }
    };

    CardCanvas.prototype.getScreenCenter = function() {
      var $w, w_x, w_y;

      $w = $(window);
      w_x = $w.width() / 2 - this.x;
      w_y = $w.height() / 2 - this.y;
      return {
        x: w_x,
        y: w_y
      };
    };

    return CardCanvas;

  })(Tags.DIV);

  $app = $('#app');

  canvas = new CardCanvas({
    id: 'canvas'
  });

  controls = new Tags.DIV({
    id: 'controls',
    content: [
      new Button({
        label: 'Add Card',
        "class": 'friendly',
        spinner: true,
        action: function(self) {
          console.log(self, card_collection.url());
          return card_collection.addCard(function(card) {
            self.enable();
            return console.log(card);
          });
        }
      })
    ]
  });

  card_collection.on('sync', function() {});

  card_collection.on('add', function(card) {
    return canvas.addContent(new CardView({
      model: card
    }));
  });

  card_collection.fetch();

  $app.append(canvas.el, controls.el);

  _.defer(canvas.render);

}).call(this);
